<?php
/*
 * DetalaseApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace DetalaseApiLib\Tests;

use DetalaseApiLib\APIException;
use DetalaseApiLib\Exceptions;
use DetalaseApiLib\APIHelper;
use DetalaseApiLib\Models;

class ProductControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \DetalaseApiLib\Controllers\ProductController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \DetalaseApiLib\DetalaseApiClient();
        self::$controller = $client->getProduct();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * param | value 
--- | --- 
cat | categories_id1 
cat2 | categories_id2
cat3 | categories_id3
cat4 | categories_id4
     */
    public function testGetProduct()
    {
        // Parameters for the API call
        $type = 1;
        $id = 5;
        $priceRange = '0,100000';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getProduct($type, $id, $priceRange);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * search parameter : src
ex : {{url}}/product/searchInput?src=fashion
     */
    public function testSearchInput()
    {
        // Parameters for the API call
        $src = 'fashion';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->searchInput($src);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testSearchResult()
    {
        // Parameters for the API call
        $src = 'fashion';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->searchResult($src);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testSaveMyProduct()
    {
        // Parameters for the API call
        $id = 3;
        $value = 'Size (clothing):S_Color (costume):Blue Dark';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createSaveMyProduct($id, $value);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testSaveBulkProduct()
    {
        // Parameters for the API call
        $id = 1;

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createSaveBulkProduct($id);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * param|value
---|---
id|product_id/spu_id
     */
    public function testProdDetail()
    {
        // Parameters for the API call
        $id = 3;

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getProdDetail($id);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testGetCat()
    {
        // Parameters for the API call
        $type = 1;
        $id = 1;

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getCat($type, $id);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testSelectedProd()
    {
        // Parameters for the API call
        $id = 473487;
        $value = 'Primary color E Type:1_Size (mobile):For Galaxy NOTE 8';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createSelectedProd($id, $value);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
